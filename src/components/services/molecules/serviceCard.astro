---
export interface Props {
  icon: string;
  title: string;
  description: string;
  url?: string;
}
const { icon, title, description, url = "#" } = Astro.props;
---

<div class="service-card-container group flex flex-col items-center">
  <div class="w-full flex justify-center items-center rounded-t-lg image-container">
    <img src={icon} alt={title} class="w-full object-cover group-hover:animate-pulse transition-all duration-300" />
  </div>
  
  <div class="p-6 flex flex-col items-center w-full">
    <h3 class="text-xl font-semibold mb-3 text-center card-title">{title}</h3>
    <p class="card-description text-center mb-6 text-sm">{description}</p>
    
    <a 
      href={url}
      class="inline-flex items-center justify-center w-10 h-10 rounded-full card-button"
      aria-label="Ver mÃ¡s"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </a>
  </div>
</div>

<style>
  .service-card-container {
    background-color: var(--color-background);
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    width: 100%;
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.5s ease-out, box-shadow 0.3s ease, transform 0.3s ease;
    max-width: 350px;
    min-height: 380px;
    margin: 0 auto;
  }
  
  .service-card-container.animate {
    opacity: 1;
    transform: translateY(0);
  }
  
  .image-container {
    height: 180px;
    overflow: hidden;
    background-color: var(--color-primary-light);
  }
  
  .image-container img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }
  
  .card-title {
    color: var(--color-dark);
  }
  
  .card-description {
    color: var(--color-dark-light);
  }
  
  .card-button {
    background-color: var(--color-primary);
    color: var(--color-background);
    transition: background-color 0.3s ease;
  }
  
  .card-button:hover {
    background-color: var(--color-primary-dark);
  }
  
  .service-card-container {
    transition: transform 0.3s ease, box-shadow 0.3s ease, opacity 0.8s ease-out;
  }
  
  .service-card-container:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
  }
  
  .group:hover img {
    animation: pulse 1.5s infinite;
  }
  
  :global(.dark) .service-card-container {
    background-color: var(--color-dark-background-light);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
  }
  
  :global(.dark) .card-title {
    color: var(--color-background);
  }
  
  :global(.dark) .card-description {
    color: var(--color-background-dark);
  }
  
  :global(.dark) .image-container {
    background-color: var(--color-dark-primary-light);
  }
  
  :global(.dark) .card-button {
    background-color: var(--color-dark-primary);
  }
  
  :global(.dark) .card-button:hover {
    background-color: var(--color-dark-primary-dark);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate');
          }
        });
      },
      {
        threshold: 0.2,
        rootMargin: '0px 0px -100px 0px'
      }
    );

    const serviceCards = document.querySelectorAll('.service-card-container');
    serviceCards.forEach(card => {
      observer.observe(card);
    });
  });
</script>